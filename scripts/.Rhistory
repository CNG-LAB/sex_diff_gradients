install.packages("sjstats")
install.packages('emmeans')
sessionInfo()
install.packages("sjstats")
setRepositories()
1
ap <- available.packages()
View(ap)
install.packages("estimability")
install.packages("installr")
library(installr)
updateR()
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# SET UP
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Load packages
require(rstudioapi) # gets path of script
# require(tidyverse)
require(plyr)  # ddply
require(lme4)  # for lmer (linear mixed effects model)
require(lmerTest)  # to obtain p-values for lmer - this actually overrides lme4's lmer() and prints the p-values for the fixed effects (which aren't present in lme4's lmer())
# note that no p-values are printed for the random effects because p values cannot be estimated for random effects because these are latent variables without standard deviations
# Clear environment
rm(list = ls())
# set up directories
codedir = dirname(getActiveDocumentContext()$path)  # get path to current script
datadir = '/data/p_02667/sex_diff_gradients/data/'
resdir_hcp = '/data/p_02667/sex_diff_gradients/results/HCP/SA/'
# set directory to path of current script
setwd(codedir)
# Descriptives
HCP_demographics_cleaned_final = read.csv(paste(resdir_hcp, 'demographics_cleaned_final.csv', sep = ''), fileEncoding = 'UTF-8-BOM')
dim(HCP_demographics_cleaned_final)
str(HCP_demographics_cleaned_final)
# Aligned functional gradient loadings (wholebrain and hemi)
HCP_hemi_array_aligned_fc_G1 = read.csv(paste(resdir_hcp, 'hemi_array_aligned_fc_G1.csv', sep = ''), fileEncoding = 'UTF-8-BOM')
### power analyses
library(simr)
df <- data.frame(
family_id = HCP_demographics_cleaned_final$Family_ID,
twin_status = HCP_demographics_cleaned_final$TwinStatus,
gradient_val <- scale(HCP_hemi_array_aligned_fc_G1[[1]]),
sex <- HCP_demographics_cleaned_final$Gender,
age <- scale(HCP_demographics_cleaned_final$Age_in_Yrs),
totSA <- scale(HCP_demographics_cleaned_final$tot_SA)
)
lmer_fit <- lmer(gradient_val ~ sex + age + totSA + sex*totSA +  (1 | family_id/twin_status), REML = FALSE, data = df)
fixef(lmer_fit)["sexM:totSA"] <- 0.1  # specify the minimum interesting effect (standard practice for computing power) for sex*morphometric variable interaction effect on S-A axis loadings -> I chose small effect for standardized beta
power <- powerSim(lmer_fit, nsim = 200, test= fixed("sexM:totSA", method = "z"))
power
e
fixef(lmer_fit)["sexM:totSA"] <- 0.2  # specify the minimum interesting effect (standard practice for computing power) for sex*morphometric variable interaction effect on S-A axis loadings -> I chose small effect for standardized beta
power <- powerSim(lmer_fit, nsim = 200, test= fixed("sexM:totSA", method = "z"))
power
fixef(lmer_fit)["sexM:totSA"] <- 0.3  # specify the minimum interesting effect (standard practice for computing power) for sex*morphometric variable interaction effect on S-A axis loadings -> I chose small effect for standardized beta
power <- powerSim(lmer_fit, nsim = 200, test= fixed("sexM:totSA", method = "z"))
power
