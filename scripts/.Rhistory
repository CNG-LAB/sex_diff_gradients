# Extract from summary of lmer_fit the t- and p-values
# summary(lmer_fit)$coefficients[row, column]; row = 1 intercept, 2 estradiol, 3 progesterone; columns = 1 Estimate, 2 Std. Error, 3 df, 4 t-value, 5 p-value
t_val[[i]] = summary(lmer_fit)$coefficients[2,4]
p_val[[i]] = summary(lmer_fit)$coefficients[2,5]
beta_val[[i]] = summary(lmer_fit)$coefficients[2,1]
}
# Calculate FDR-corrected q-values from p-values
q_val = p.adjust(p_val, method = "fdr")
# Create output dataframe containing t-values, p-values, and q-values
output_df = data.frame(t_val, p_val, q_val, beta_val)
return(output_df)
}
# run model
lmer_Me_excl26_G1_estr_contrast_res = lmer.estr_contrast(df_dv = array_aligned_fc_G1_excl26, df_iv = hormones_28Me_excl26)
# Estradiol contrast
lmer.estr_contrast <- function(df_dv, df_iv) {
'
- fits and runs linear model to test for ESTRADIOL effects, in lmer: Gradient_Loadings ~ estradiol + progesterone + random effect(experiment day)
- to supply: df_dv (dataframe containing the dependent variable), df_iv (dataframe containing the independent variables)
- outputs dataframe containing t-values, p-values, and FDR-corrected q-values for ESTRADIOL contrast
'
# Create empty vectors (0s) of type "double precision" and length of len(df_dv)
t_val = vector(mode = "double", length = ncol(df_dv))
p_val = vector(mode = "double", length = ncol(df_dv))
beta_val = vector(mode = "double", length = ncol(df_dv))
# Loop over the df_dv columns (= parcels)
for (i in seq_along(df_dv)) {
ExperimentDay = df_iv$ExperimentDay
# Fit a linear mixed effects model: Gradient_Loadings ~ estradiol + progesterone + random effect(experiment day)
lmer_fit <- lmer(df_dv[[i]] ~ df_iv$estradiol + df_iv$progesterone +  (1 | ExperimentDay), REML = FALSE, control=lmerControl(check.nobs.vs.nlev = "ignore", check.nobs.vs.rankZ = "ignore", check.nobs.vs.nRE="ignore"))
# Extract from summary of lmer_fit the t- and p-values
# summary(lmer_fit)$coefficients[row, column]; row = 1 intercept, 2 estradiol, 3 progesterone; columns = 1 Estimate, 2 Std. Error, 3 df, 4 t-value, 5 p-value
t_val[[i]] = summary(lmer_fit)$coefficients[2,4]
p_val[[i]] = summary(lmer_fit)$coefficients[2,5]
beta_val[[i]] = summary(lmer_fit)$coefficients[2,1]
}
# Calculate FDR-corrected q-values from p-values
q_val = p.adjust(p_val, method = "fdr")
# Create output dataframe containing t-values, p-values, and q-values
output_df = data.frame(t_val, p_val, q_val, beta_val)
return(output_df)
}
# run model
lmer_Me_excl26_G1_estr_contrast_res = lmer.estr_contrast(df_dv = array_aligned_fc_G1_excl26, df_iv = hormones_28Me_excl26)
# number of significant parcels
sum(lmer_Me_excl26_G1_estr_contrast_res$q_val < 0.05, na.rm=TRUE)  # other way: length(which(G1_lm_res$q_val < 0.05))
lmer_Me_excl26_G1_estr_contrast_res
# number of significant parcels
sum(lmer_Me_excl26_G1_estr_contrast_res$p_val < 0.05, na.rm=TRUE)  # other way: length(which(G1_lm_res$q_val < 0.05))
ExperimentDay = hormones_28Me_excl26$ExperimentDay
# Fit a linear mixed effects model: Gradient_Loadings ~ estradiol + progesterone + random effect(experiment day)
lmer_fit <- lmer(array_aligned_fc_G1_excl26[[1]] ~ hormones_28Me_excl26$estradiol + hormones_28Me_excl26$progesterone +  (1 | ExperimentDay), REML = FALSE, control=lmerControl(check.nobs.vs.nlev = "ignore", check.nobs.vs.rankZ = "ignore", check.nobs.vs.nRE="ignore"))
lmer_fit
summary(lmer_fit)
summary(lmer_fit)$coefficients[2,4]
summary(lmer_fit)$coefficients[2,5]
summary(lmer_fit)$coefficients[3,5]
# Progesterone contrast
lmer.prog_contrast <- function(df_dv, df_iv) {
'
- fits and runs linear model to test for PROGESTERONE effects, in lmer: Gradient_Loadings ~ estradiol + progesterone + random effect(experiment day)
- to supply: df_dv (dataframe containing the dependent variable), df_iv (dataframe containing the independent variables)
- outputs dataframe containing t-values, p-values, and FDR-corrected q-values for PROGESTERONE contrast
'
# Create empty vectors (0s) of type "double precision" and length of len(df_dv)
t_val = vector(mode = "double", length = ncol(df_dv))
p_val = vector(mode = "double", length = ncol(df_dv))
beta_val = vector(mode = "double", length = ncol(df_dv))
# Loop over the df_dv columns (= parcels)
for (i in seq_along(df_dv)) {
ExperimentDay = df_iv$ExperimentDay
# Fit a linear mixed effects model: Gradient_Loadings ~ estradiol + progesterone + random effect(experiment day)
lmer_fit <- lmer(df_dv[[i]] ~ df_iv$estradiol + df_iv$progesterone +  (1 | ExperimentDay), REML = FALSE, control=lmerControl(check.nobs.vs.nlev = "ignore", check.nobs.vs.rankZ = "ignore", check.nobs.vs.nRE="ignore"))
# Extract from summary of lmer_fit the t- and p-values
# summary(lmer_fit)$coefficients[row, column]; row = 1 intercept, 2 estradiol, 3 progesterone; columns = 1 Estimate, 2 Std. Error, 3 df, 4 t-value, 5 p-value
t_val[[i]] = summary(lmer_fit)$coefficients[3,4]
p_val[[i]] = summary(lmer_fit)$coefficients[3,5]
beta_val[[i]] = summary(lmer_fit)$coefficients[3,1]
}
# Calculate FDR-corrected q-values from p-values
q_val = p.adjust(p_val, method = "fdr")
# Create output dataframe containing t-values, p-values, and q-values
output_df = data.frame(t_val, p_val, q_val, beta_val)
return(output_df)
}
lmer_Me_excl26_G1_prog_contrast_res = lmer.prog_contrast(df_dv = array_aligned_fc_G1_excl26, df_iv = hormones_28Me_excl26)
sum(lmer_Me_excl26_G1_prog_contrast_res$q_val < 0.05, na.rm=TRUE)
sum(lmer_Me_excl26_G1_prog_contrast_res$p_val < 0.05, na.rm=TRUE)
write.csv(lmer_Me_excl26_G1_estr_contrast_res, paste(resdir, 'lmer_Me_excl26_G1_estr_contrast_res.csv', sep = ''), row.names = FALSE)
write.csv(lmer_Me_excl26_G1_prog_contrast_res, paste(resdir, 'lmer_Me_excl26_G1_prog_contrast_res.csv', sep = ''), row.names = FALSE)
array_aligned_fc_G1_OC
lmer_OC_G1_estr_contrast_res = lmer.estr_contrast(df_dv = array_aligned_fc_OC_G1, df_iv = hormones_28Me_excl26)
lmer_OC_G1_estr_contrast_res = lmer.estr_contrast(df_dv = array_aligned_fc_OC_G1, df_iv = hormones_28OC)
lmer_OC_G1_prog_contrast_res = lmer.prog_contrast(df_dv = array_aligned_fc_OC_G1, df_iv = hormones_28OC)
sum(lmer_OC_G1_estr_contrast_res$q_val < 0.05, na.rm=TRUE)
sum(lmer_OC_G1_prog_contrast_res$q_val < 0.05, na.rm=TRUE)
hormones_28He_AM
str(hormones_28He_AM)
# Cortisol contrast
lmer.cort_contrast <- function(df_dv, df_iv) {
'
- fits and runs linear model to test for CORTISOL effects, in lmer: Gradient_Loadings ~ testosterone + cortisol + random effect(experiment day)
- to supply: df_dv (dataframe containing the dependent variable), df_iv (dataframe containing the independent variables)
- outputs dataframe containing t-values, p-values, and FDR-corrected q-values for CORTISOL contrast
'
# Create empty vectors (0s) of type "double precision" and length of len(df_dv)
t_val = vector(mode = "double", length = ncol(df_dv))
p_val = vector(mode = "double", length = ncol(df_dv))
beta_val = vector(mode = "double", length = ncol(df_dv))
# Loop over the df_dv columns (= parcels)
for (i in seq_along(df_dv)) {
ExperimentDay = df_iv$ExperimentDay
# Fit a linear mixed effects model: Gradient_Loadings ~ testosterone + cortisol + random effect(experiment day)
lmer_fit <- lmer(df_dv[[i]] ~ df_iv$total_testosterone_saliva + df_iv$cortisol_saliva +  (1 | ExperimentDay), REML = FALSE, control=lmerControl(check.nobs.vs.nlev = "ignore", check.nobs.vs.rankZ = "ignore", check.nobs.vs.nRE="ignore"))
# Extract from summary of lmer_fit the t- and p-values
# summary(lmer_fit)$coefficients[row, column]; row = 1 intercept, 2 testosterone, 3 cortisol; columns = 1 Estimate, 2 Std. Error, 3 df, 4 t-value, 5 p-value
t_val[[i]] = summary(lmer_fit)$coefficients[3,4]
p_val[[i]] = summary(lmer_fit)$coefficients[3,5]
beta_val[[i]] = summary(lmer_fit)$coefficients[3,1]
}
# Calculate FDR-corrected q-values from p-values
q_val = p.adjust(p_val, method = "fdr")
# Create output dataframe containing t-values, p-values, and q-values
output_df = data.frame(t_val, p_val, q_val, beta_val)
return(output_df)
}
# Testosterone contrast
lmer.test_contrast <- function(df_dv, df_iv) {
'
- fits and runs linear model to test for TESTOSTERONE effects, in lmer: Gradient_Loadings ~ testosterone + cortisol + random effect(experiment day)
- to supply: df_dv (dataframe containing the dependent variable), df_iv (dataframe containing the independent variables)
- outputs dataframe containing t-values, p-values, and FDR-corrected q-values for TESTOSTERONE contrast
'
# Create empty vectors (0s) of type "double precision" and length of len(df_dv)
t_val = vector(mode = "double", length = ncol(df_dv))
p_val = vector(mode = "double", length = ncol(df_dv))
beta_val = vector(mode = "double", length = ncol(df_dv))
# Loop over the df_dv columns (= parcels)
for (i in seq_along(df_dv)) {
ExperimentDay = df_iv$ExperimentDay
# Fit a linear mixed effects model: Gradient_Loadings ~ testosterone + cortisol + random effect(experiment day)
lmer_fit <- lmer(df_dv[[i]] ~ df_iv$total_testosterone_saliva + df_iv$cortisol_saliva +  (1 | ExperimentDay), REML = FALSE, control=lmerControl(check.nobs.vs.nlev = "ignore", check.nobs.vs.rankZ = "ignore", check.nobs.vs.nRE="ignore"))
# Extract from summary of lmer_fit the t- and p-values
# summary(lmer_fit)$coefficients[row, column]; row = 1 intercept, 2 testosterone, 3 cortisol; columns = 1 Estimate, 2 Std. Error, 3 df, 4 t-value, 5 p-value
t_val[[i]] = summary(lmer_fit)$coefficients[2,4]
p_val[[i]] = summary(lmer_fit)$coefficients[2,5]
beta_val[[i]] = summary(lmer_fit)$coefficients[2,1]
}
# Calculate FDR-corrected q-values from p-values
q_val = p.adjust(p_val, method = "fdr")
# Create output dataframe containing t-values, p-values, and q-values
output_df = data.frame(t_val, p_val, q_val, beta_val)
return(output_df)
}
# Extract from summary of lmer_fit the t- and p-values
# summary(lmer_fit)$coefficients[row, column]; row = 1 intercept, 2 testosterone, 3 cortisol; columns = 1 Estimate, 2 Std. Error, 3 df, 4 t-value, 5 p-value
t_val[[i]] = summary(lmer_fit)$coefficients[2,4]
# Testosterone contrast
lmer.test_contrast <- function(df_dv, df_iv) {
'
- fits and runs linear model to test for TESTOSTERONE effects, in lmer: Gradient_Loadings ~ testosterone + cortisol + random effect(experiment day)
- to supply: df_dv (dataframe containing the dependent variable), df_iv (dataframe containing the independent variables)
- outputs dataframe containing t-values, p-values, and FDR-corrected q-values for TESTOSTERONE contrast
'
# Create empty vectors (0s) of type "double precision" and length of len(df_dv)
t_val = vector(mode = "double", length = ncol(df_dv))
p_val = vector(mode = "double", length = ncol(df_dv))
beta_val = vector(mode = "double", length = ncol(df_dv))
# Loop over the df_dv columns (= parcels)
for (i in seq_along(df_dv)) {
ExperimentDay = df_iv$ExperimentDay
# Fit a linear mixed effects model: Gradient_Loadings ~ testosterone + cortisol + random effect(experiment day)
lmer_fit <- lmer(df_dv[[i]] ~ df_iv$total_testosterone_saliva + df_iv$cortisol_saliva +  (1 | ExperimentDay), REML = FALSE, control=lmerControl(check.nobs.vs.nlev = "ignore", check.nobs.vs.rankZ = "ignore", check.nobs.vs.nRE="ignore"))
# Extract from summary of lmer_fit the t- and p-values
# summary(lmer_fit)$coefficients[row, column]; row = 1 intercept, 2 testosterone, 3 cortisol; columns = 1 Estimate, 2 Std. Error, 3 df, 4 t-value, 5 p-value
t_val[[i]] = summary(lmer_fit)$coefficients[2,4]
p_val[[i]] = summary(lmer_fit)$coefficients[2,5]
beta_val[[i]] = summary(lmer_fit)$coefficients[2,1]
}
# Calculate FDR-corrected q-values from p-values
q_val = p.adjust(p_val, method = "fdr")
# Create output dataframe containing t-values, p-values, and q-values
output_df = data.frame(t_val, p_val, q_val, beta_val)
return(output_df)
}
array_aligned_fc_He_AM_G1
hormones_He_AM
# run model
lmer_He_AM_G1_test_contrast_res = lmer.test_contrast(df_dv = array_aligned_fc_He_AM_G1, df_iv = hormones_HeAM)
lmer_He_AM_G1_test_contrast_res = lmer.test_contrast(df_dv = array_aligned_fc_He_AM_G1, df_iv = hormones_28He_AM)
ExperimentDay = df_iv$session
# Testosterone contrast
lmer.test_contrast <- function(df_dv, df_iv) {
'
- fits and runs linear model to test for TESTOSTERONE effects, in lmer: Gradient_Loadings ~ testosterone + cortisol + random effect(experiment day)
- to supply: df_dv (dataframe containing the dependent variable), df_iv (dataframe containing the independent variables)
- outputs dataframe containing t-values, p-values, and FDR-corrected q-values for TESTOSTERONE contrast
'
# Create empty vectors (0s) of type "double precision" and length of len(df_dv)
t_val = vector(mode = "double", length = ncol(df_dv))
p_val = vector(mode = "double", length = ncol(df_dv))
beta_val = vector(mode = "double", length = ncol(df_dv))
# Loop over the df_dv columns (= parcels)
for (i in seq_along(df_dv)) {
ExperimentDay = df_iv$session
# Fit a linear mixed effects model: Gradient_Loadings ~ testosterone + cortisol + random effect(experiment day)
lmer_fit <- lmer(df_dv[[i]] ~ df_iv$total_testosterone_saliva + df_iv$cortisol_saliva +  (1 | ExperimentDay), REML = FALSE, control=lmerControl(check.nobs.vs.nlev = "ignore", check.nobs.vs.rankZ = "ignore", check.nobs.vs.nRE="ignore"))
# Extract from summary of lmer_fit the t- and p-values
# summary(lmer_fit)$coefficients[row, column]; row = 1 intercept, 2 testosterone, 3 cortisol; columns = 1 Estimate, 2 Std. Error, 3 df, 4 t-value, 5 p-value
t_val[[i]] = summary(lmer_fit)$coefficients[2,4]
p_val[[i]] = summary(lmer_fit)$coefficients[2,5]
beta_val[[i]] = summary(lmer_fit)$coefficients[2,1]
}
# Calculate FDR-corrected q-values from p-values
q_val = p.adjust(p_val, method = "fdr")
# Create output dataframe containing t-values, p-values, and q-values
output_df = data.frame(t_val, p_val, q_val, beta_val)
return(output_df)
}
# Cortisol contrast
lmer.cort_contrast <- function(df_dv, df_iv) {
'
- fits and runs linear model to test for CORTISOL effects, in lmer: Gradient_Loadings ~ testosterone + cortisol + random effect(experiment day)
- to supply: df_dv (dataframe containing the dependent variable), df_iv (dataframe containing the independent variables)
- outputs dataframe containing t-values, p-values, and FDR-corrected q-values for CORTISOL contrast
'
# Create empty vectors (0s) of type "double precision" and length of len(df_dv)
t_val = vector(mode = "double", length = ncol(df_dv))
p_val = vector(mode = "double", length = ncol(df_dv))
beta_val = vector(mode = "double", length = ncol(df_dv))
# Loop over the df_dv columns (= parcels)
for (i in seq_along(df_dv)) {
ExperimentDay = df_iv$session
# Fit a linear mixed effects model: Gradient_Loadings ~ testosterone + cortisol + random effect(experiment day)
lmer_fit <- lmer(df_dv[[i]] ~ df_iv$total_testosterone_saliva + df_iv$cortisol_saliva +  (1 | ExperimentDay), REML = FALSE, control=lmerControl(check.nobs.vs.nlev = "ignore", check.nobs.vs.rankZ = "ignore", check.nobs.vs.nRE="ignore"))
# Extract from summary of lmer_fit the t- and p-values
# summary(lmer_fit)$coefficients[row, column]; row = 1 intercept, 2 testosterone, 3 cortisol; columns = 1 Estimate, 2 Std. Error, 3 df, 4 t-value, 5 p-value
t_val[[i]] = summary(lmer_fit)$coefficients[3,4]
p_val[[i]] = summary(lmer_fit)$coefficients[3,5]
beta_val[[i]] = summary(lmer_fit)$coefficients[3,1]
}
# Calculate FDR-corrected q-values from p-values
q_val = p.adjust(p_val, method = "fdr")
# Create output dataframe containing t-values, p-values, and q-values
output_df = data.frame(t_val, p_val, q_val, beta_val)
return(output_df)
}
# run model
lmer_He_AM_G1_test_contrast_res = lmer.test_contrast(df_dv = array_aligned_fc_He_AM_G1, df_iv = hormones_28He_AM)
lmer_He_AM_G1_cort_contrast_res = lmer.cort_contrast(df_dv = array_aligned_fc_He_AM_G1, df_iv = hormones_28He_AM)
sum(lmer_He_PM_G1_test_contrast_res$q_val < 0.05, na.rm=TRUE)
sum(lmer_He_PM_G1_cort_contrast_res$q_val < 0.05, na.rm=TRUE)
lmer_He_PM_G1_test_contrast_res = lmer.test_contrast(df_dv = array_aligned_fc_He_PM_G1, df_iv = hormones_28He_PM)
# number of significant parcels
sum(lmer_He_AM_G1_test_contrast_res$q_val < 0.05, na.rm=TRUE)  # other way: length(which(G1_lm_res$q_val < 0.05))
sum(lmer_He_AM_G1_cort_contrast_res$q_val < 0.05, na.rm=TRUE)
lmer_He_PM_G1_test_contrast_res = lmer.test_contrast(df_dv = array_aligned_fc_He_PM_G1, df_iv = hormones_28He_PM)
lmer_He_PM_G1_cort_contrast_res = lmer.cort_contrast(df_dv = array_aligned_fc_He_PM_G1, df_iv = hormones_28He_PM)
sum(lmer_He_PM_G1_test_contrast_res$q_val < 0.05, na.rm=TRUE)
sum(lmer_He_PM_G1_cort_contrast_res$q_val < 0.05, na.rm=TRUE)
# number of significant parcels
sum(lmer_He_AM_G1_test_contrast_res$q_val < 0.05, na.rm=TRUE)  # other way: length(which(G1_lm_res$q_val < 0.05))
sum(lmer_He_AM_G1_cort_contrast_res$q_val < 0.05, na.rm=TRUE)
write.csv(lmer_Me_excl26_G1_estr_contrast_res, paste(resdir, 'lmer_Me_excl26_G1_estr_contrast_res.csv', sep = ''), row.names = FALSE)
write.csv(lmer_Me_excl26_G1_prog_contrast_res, paste(resdir, 'lmer_Me_excl26_G1_prog_contrast_res.csv', sep = ''), row.names = FALSE)
write.csv(lmer_OC_G1_estr_contrast_res, paste(resdir, 'lmer_OC_G1_estr_contrast_res.csv', sep = ''), row.names = FALSE)
write.csv(lmer_OC_G1_prog_contrast_res, paste(resdir, 'lmer_OC_G1_prog_contrast_res.csv', sep = ''), row.names = FALSE)
write.csv(lmer_He_AM_G1_test_contrast_res, paste(resdir, 'lmer_He_AM_G1_test_contrast_res.csv', sep = ''), row.names = FALSE)
write.csv(lmer_He_AM_G1_cort_contrast_res, paste(resdir, 'lmer_He_AM_G1_cort_contrast_res.csv', sep = ''), row.names = FALSE)
write.csv(lmer_He_PM_G1_test_contrast_res, paste(resdir, 'lmer_He_PM_G1_test_contrast_res.csv', sep = ''), row.names = FALSE)
write.csv(lmer_He_PM_G1_cort_contrast_res, paste(resdir, 'lmer_He_PM_G1_cort_contrast_res.csv', sep = ''), row.names = FALSE)
# Estradiol contrast
lmer.estr_contrast <- function(df_dv, df_iv) {
'
- fits and runs linear model to test for ESTRADIOL effects, in lmer: Gradient_Loadings ~ estradiol + progesterone + random effect(experiment day)
- to supply: df_dv (dataframe containing the dependent variable), df_iv (dataframe containing the independent variables)
- outputs dataframe containing t-values, p-values, and FDR-corrected q-values for ESTRADIOL contrast
'
# Create empty vectors (0s) of type "double precision" and length of len(df_dv)
t_val = vector(mode = "double", length = ncol(df_dv))
p_val = vector(mode = "double", length = ncol(df_dv))
beta_val = vector(mode = "double", length = ncol(df_dv))
# Loop over the df_dv columns (= parcels)
for (i in seq_along(df_dv)) {
ExperimentDay = df_iv$ExperimentDay
# Fit a linear mixed effects model: Gradient_Loadings ~ estradiol + progesterone + random effect(experiment day)
lmer_fit <- lmer(df_dv[[i]] ~ df_iv$estradiol + df_iv$progesterone +  (1 | ExperimentDay), REML = FALSE)
# Extract from summary of lmer_fit the t- and p-values
# summary(lmer_fit)$coefficients[row, column]; row = 1 intercept, 2 estradiol, 3 progesterone; columns = 1 Estimate, 2 Std. Error, 3 df, 4 t-value, 5 p-value
t_val[[i]] = summary(lmer_fit)$coefficients[2,4]
p_val[[i]] = summary(lmer_fit)$coefficients[2,5]
beta_val[[i]] = summary(lmer_fit)$coefficients[2,1]
}
# Calculate FDR-corrected q-values from p-values
q_val = p.adjust(p_val, method = "fdr")
# Create output dataframe containing t-values, p-values, and q-values
output_df = data.frame(t_val, p_val, q_val, beta_val)
return(output_df)
}
# Aligned functional gradient loadings
array_aligned_fc_G1_excl26 = read.csv(paste(resdir, 'array_aligned_fc_G1_excl26.csv', sep = ''), fileEncoding = 'UTF-8-BOM')
# run model
lmer_Me_excl26_G1_estr_contrast_res = lmer.estr_contrast(df_dv = array_aligned_fc_G1_excl26, df_iv = hormones_28Me_excl26)
# Estradiol contrast
lmer.estr_contrast <- function(df_dv, df_iv) {
'
- fits and runs linear model to test for ESTRADIOL effects, in lmer: Gradient_Loadings ~ estradiol + progesterone + random effect(experiment day)
- to supply: df_dv (dataframe containing the dependent variable), df_iv (dataframe containing the independent variables)
- outputs dataframe containing t-values, p-values, and FDR-corrected q-values for ESTRADIOL contrast
'
# Create empty vectors (0s) of type "double precision" and length of len(df_dv)
t_val = vector(mode = "double", length = ncol(df_dv))
p_val = vector(mode = "double", length = ncol(df_dv))
beta_val = vector(mode = "double", length = ncol(df_dv))
# Loop over the df_dv columns (= parcels)
for (i in seq_along(df_dv)) {
ExperimentDay = df_iv$ExperimentDay
# Fit a linear mixed effects model: Gradient_Loadings ~ estradiol + progesterone + random effect(experiment day)
lmer_fit <- lmer(df_dv[[i]] ~ df_iv$estradiol + df_iv$progesterone +  (1 | ExperimentDay), REML = FALSE, control=lmerControl(check.nobs.vs.nlev = "ignore", check.nobs.vs.rankZ = "ignore", check.nobs.vs.nRE="ignore"))
# Extract from summary of lmer_fit the t- and p-values
# summary(lmer_fit)$coefficients[row, column]; row = 1 intercept, 2 estradiol, 3 progesterone; columns = 1 Estimate, 2 Std. Error, 3 df, 4 t-value, 5 p-value
t_val[[i]] = summary(lmer_fit)$coefficients[2,4]
p_val[[i]] = summary(lmer_fit)$coefficients[2,5]
beta_val[[i]] = summary(lmer_fit)$coefficients[2,1]
}
# Calculate FDR-corrected q-values from p-values
q_val = p.adjust(p_val, method = "fdr")
# Create output dataframe containing t-values, p-values, and q-values
output_df = data.frame(t_val, p_val, q_val, beta_val)
return(output_df)
}
install.packages(minque)
install.packages('minque')
library(minque)
ExperimentDay = hormones_28Me_excl26$ExperimentDay
OUT<-lmm(array_aligned_fc_G1_excl26[[1]] ~ hormones_28Me_excl26$estradiol + hormones_28Me_excl26$progesterone + 1|ExperimentDay,method=c("reml"))
array_aligned_fc_G1_excl26[[1]
array_aligned_fc_G1_excl26[[1]]
array_aligned_fc_G1_excl26[[1]]
OUT<-lmm(array_aligned_fc_G1_excl26[[1]] ~ hormones_28Me_excl26$estradiol + hormones_28Me_excl26$progesterone + 1|ExperimentDay,method=c("reml"))
OUT<-lmm(array_aligned_fc_G1_excl26[[1]] ~ hormones_28Me_excl26$estradiol+hormones_28Me_excl26$progesterone+1|ExperimentDay, method=c("reml"))
OUT <- lmm(array_aligned_fc_G1_excl26[[1]] ~ estradiol + progesterone + 1 | ExperimentDay, data = hormones_28Me_excl26, method = c("reml"))
OUT[[1]]$Var
OUT[[1]]$FixedEffect
OUT[[1]]$RandomEffect
OUT
OUT[[1]]$FixedEffect
OUT$FixedEffect
OUT$FixedEffect[2,3]
OUT$FixedEffect$estradiol
OUT$FixedEffec[estradiol]
OUT$FixedEffects[estradiol]
OUT$FixedEffects[2,4]
OUT$FixedEffects[2,3]
OUT$FixedEffects[1,3]
OUT$FixedEffects[1,1]
OUT$FixedEffects
OUT$FixedEffect[1,1]
dim(OUT$FixedEffect)
OUT$FixedEffect
str(OUT$FixedEffect)
OUT$FixedEffect$z_value
OUT$FixedEffect$z_value[1]
test=OUT$FixedEffect
test=z_value[1]
test=z_value
test$z_value
test
str(OUT$FixedEffect)
str(hormones_28Me_excl26)
hormones_28Me_excl26$Experiment
OUT$FixedEffect
OUT$FixedEffect[[1,1]]
OUT$FixedEffect[1,1]
OUT$coef["estradiol", "z"]
OUT$coef
OUT$coef["estradiol", "z_value"]
OUT$FixedEffect["estradiol", "z_value"]
summary(OUT)
# Extract the summary information
summary_info <- summary(OUT)
# Access the z-value for estradiol
z_value_estradiol <- summary_info$coefficients["estradiol", "z value"]
test
test$z_value
test$estradiol
hormones_28Me_excl26$t
class(test)
test[[1]]
test[1]
test[[1]]
class(test[[1]])
test[[1]]$z_value
test[[1]]$estradiol
test[[1]][2,3]
OUT$FixedEffect[[1]][2,3]
OUT$FixedEffect[[1]][1,3] # z value
OUT$FixedEffect[[1]][3,4] # z value
lmer.estr_contrast <- function(df_dv, df_iv) {
'
- fits and runs linear model to test for ESTRADIOL effects, in lmer: Gradient_Loadings ~ estradiol + progesterone + random effect(experiment day)
- to supply: df_dv (dataframe containing the dependent variable), df_iv (dataframe containing the independent variables)
- outputs dataframe containing t-values, p-values, and FDR-corrected q-values for ESTRADIOL contrast
'
# Create empty vectors (0s) of type "double precision" and length of len(df_dv)
t_val = vector(mode = "double", length = ncol(df_dv))
p_val = vector(mode = "double", length = ncol(df_dv))
# Loop over the df_dv columns (= parcels)
for (i in seq_along(df_dv)) {
# Fit a linear mixed effects model: Gradient_Loadings ~ estradiol + progesterone + random effect(experiment day)
lmer_fit <- lmm(df_dv[[1]] ~ estradiol + progesterone + 1 | ExperimentDay, data = df_iv, method = c("reml"))
# Extract from summary of lmer_fit the z- and p-values
# lmer_fit$FixedEffect[[1]][row, column]; row: 1 mu, 2 estradiol, 3 progesterone; columns: 1 Est, 2 SE, 3 z_value, 4 P_value
t_val[[i]] = lmer_fit$FixedEffect[[1]][2,3] # z NOT t
p_val[[i]] = lmer_fit$FixedEffect[[1]][2,4]
}
# Calculate FDR-corrected q-values from p-values
q_val = p.adjust(p_val, method = "fdr")
# Create output dataframe containing t-values, p-values, and q-values
output_df = data.frame(t_val, p_val, q_val)
return(output_df)
}
lmer_OC_G1_estr_contrast_res = lmer.estr_contrast(df_dv = array_aligned_fc_OC_G1, df_iv = hormones_28OC)
# number of significant parcels
sum(lmer_Me_excl26_G1_estr_contrast_res$q_val < 0.05, na.rm=TRUE)  # other way: length(which(G1_lm_res$q_val < 0.05))
sum(lmer_Me_excl26_G1_prog_contrast_res$q_val < 0.05, na.rm=TRUE)
# run model
lmer_Me_excl26_G1_estr_contrast_res = lmer.estr_contrast(df_dv = array_aligned_fc_G1_excl26, df_iv = hormones_28Me_excl26)
lmer_Me_excl26_G1_prog_contrast_res = lmer.prog_contrast(df_dv = array_aligned_fc_G1_excl26, df_iv = hormones_28Me_excl26)
# run model
lmer_Me_excl26_G1_estr_contrast_res = lmer.estr_contrast(df_dv = array_aligned_fc_G1_excl26, df_iv = hormones_28Me_excl26)
# Fit a linear mixed effects model: Gradient_Loadings ~ estradiol + progesterone + random effect(experiment day)
lmer_fit <- lmm(array_aligned_fc_G1_excl26[[1]] ~ estradiol + progesterone + 1 | ExperimentDay, data = df_iv, method = c("reml"))
lmer.estr_contrast <- function(df_dv, df_iv) {
'
- fits and runs linear model to test for ESTRADIOL effects, in lmer: Gradient_Loadings ~ estradiol + progesterone + random effect(experiment day)
- to supply: df_dv (dataframe containing the dependent variable), df_iv (dataframe containing the independent variables)
- outputs dataframe containing t-values, p-values, and FDR-corrected q-values for ESTRADIOL contrast
'
# Create empty vectors (0s) of type "double precision" and length of len(df_dv)
t_val = vector(mode = "double", length = ncol(df_dv))
p_val = vector(mode = "double", length = ncol(df_dv))
# Loop over the df_dv columns (= parcels)
for (i in seq_along(df_dv)) {
# Fit a linear mixed effects model: Gradient_Loadings ~ estradiol + progesterone + random effect(experiment day)
lmer_fit <- lmm(df_dv[[i]] ~ estradiol + progesterone + 1 | ExperimentDay, data = df_iv, method = c("reml"))
# Extract from summary of lmer_fit the z- and p-values
# lmer_fit$FixedEffect[[1]][row, column]; row: 1 mu, 2 estradiol, 3 progesterone; columns: 1 Est, 2 SE, 3 z_value, 4 P_value
t_val[[i]] = lmer_fit$FixedEffect[[1]][2,3] # z NOT t
p_val[[i]] = lmer_fit$FixedEffect[[1]][2,4]
}
# Calculate FDR-corrected q-values from p-values
q_val = p.adjust(p_val, method = "fdr")
# Create output dataframe containing t-values, p-values, and q-values
output_df = data.frame(t_val, p_val, q_val)
return(output_df)
}
# run model
lmer_Me_excl26_G1_estr_contrast_res = lmer.estr_contrast(df_dv = array_aligned_fc_G1_excl26, df_iv = hormones_28Me_excl26)
lmer_fit <- lmm(array_aligned_fc_G1_excl26[[1]] ~ estradiol + progesterone + 1 | ExperimentDay, data = hormones_28Me_excl26, method = c("reml"))
lmer_fit$FixedEffect[[1]][2,3]
View(lmer_Me_excl26_G1_estr_contrast_res)
lmer_Me_excl26_G1_estr_contrast_res = lmer.estr_contrast(df_dv = array_aligned_fc_G1_excl26, df_iv = hormones_28Me_excl26)
# Create empty vectors (0s) of type "double precision" and length of len(df_dv)
t_val = vector(mode = "double", length = ncol(array_aligned_fc_G1_excl26))
p_val = vector(mode = "double", length = ncol(array_aligned_fc_G1_excl26))
# Loop over the df_dv columns (= parcels)
for (i in seq_along(array_aligned_fc_G1_excl26)) {
# Fit a linear mixed effects model: Gradient_Loadings ~ estradiol + progesterone + random effect(experiment day)
lmer_fit <- lmm(array_aligned_fc_G1_excl26[[i]] ~ estradiol + progesterone + 1 | ExperimentDay, data = hormones_28Me_excl26, method = c("reml"))
# Extract from summary of lmer_fit the z- and p-values
# lmer_fit$FixedEffect[[1]][row, column]; row: 1 mu, 2 estradiol, 3 progesterone; columns: 1 Est, 2 SE, 3 z_value, 4 P_value
t_val[[i]] = lmer_fit$FixedEffect[[1]][2,3] # z NOT t
p_val[[i]] = lmer_fit$FixedEffect[[1]][2,4]
}
# Calculate FDR-corrected q-values from p-values
q_val = p.adjust(p_val, method = "fdr")
# Create output dataframe containing t-values, p-values, and q-values
lmer_Me_excl26_G1_estr_contrast_res = data.frame(t_val, p_val, q_val)
lmer_Me_excl26_G1_estr_contrast_res
test = lmer.estr_contrast(df_dv = array_aligned_fc_G1_excl26, df_iv = hormones_28Me_excl26)
# Estradiol contrast
lmer.estr_contrast <- function(df_dv, df_iv) {
'
- fits and runs linear model to test for ESTRADIOL effects, in lmer: Gradient_Loadings ~ estradiol + progesterone + random effect(experiment day)
- to supply: df_dv (dataframe containing the dependent variable), df_iv (dataframe containing the independent variables)
- outputs dataframe containing t-values, p-values, and FDR-corrected q-values for ESTRADIOL contrast
'
# Create empty vectors (0s) of type "double precision" and length of len(df_dv)
t_val = vector(mode = "double", length = ncol(df_dv))
p_val = vector(mode = "double", length = ncol(df_dv))
beta_val = vector(mode = "double", length = ncol(df_dv))
# Loop over the df_dv columns (= parcels)
for (i in seq_along(df_dv)) {
ExperimentDay = df_iv$ExperimentDay
# Fit a linear mixed effects model: Gradient_Loadings ~ estradiol + progesterone + random effect(experiment day)
lmer_fit <- lmer(df_dv[[i]] ~ df_iv$estradiol + df_iv$progesterone +  (1 | ExperimentDay), REML = FALSE, control=lmerControl(check.nobs.vs.nlev = "ignore", check.nobs.vs.rankZ = "ignore", check.nobs.vs.nRE="ignore"))
# Extract from summary of lmer_fit the t- and p-values
# summary(lmer_fit)$coefficients[row, column]; row = 1 intercept, 2 estradiol, 3 progesterone; columns = 1 Estimate, 2 Std. Error, 3 df, 4 t-value, 5 p-value
t_val[[i]] = summary(lmer_fit)$coefficients[2,4]
p_val[[i]] = summary(lmer_fit)$coefficients[2,5]
beta_val[[i]] = summary(lmer_fit)$coefficients[2,1]
}
# Calculate FDR-corrected q-values from p-values
q_val = p.adjust(p_val, method = "fdr")
# Create output dataframe containing t-values, p-values, and q-values
output_df = data.frame(t_val, p_val, q_val, beta_val)
return(output_df)
}
test = lmer.estr_contrast(df_dv = array_aligned_fc_G1_excl26, df_iv = hormones_28Me_excl26)
test
lmer_Me_excl26_G1_estr_contrast_res
