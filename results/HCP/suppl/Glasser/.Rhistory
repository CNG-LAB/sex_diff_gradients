setwd('/data/p_02667/Liisbeth/anaconda3/envs/actualdata/PCA/Glasser')
library(dplyr)                   # For data manipulation
library(lme4)                    # For linear mixed effects model
library(lmerTest)                # For extracting p-values from the linear model
G1_loadings_PCA <- read.csv2('G1_loadings_Glasser.csv', sep = ',')
#importing the gradient 1 loadings from every participant
RestrictedData_HCP <- read.csv2('RESTRICTED_wanb_9_29_2020_2_14_36.csv', sep = ',')
# importing the restricted HCP data: includes exact age, family ID and twin status
UnrestrictedData_HCP <- read.csv2('unrestricted_wanb_9_14_2020_7_53_51.csv', sep = ',')
# importing the unrestricted HCP data: includes Sex
SubjectIds <- read.csv2('subjects_glasser.csv', sep = ',', header = FALSE)
# data frame of subject IDs, who have fMRI data
UnrestrictedData_HCP$subids <- match(UnrestrictedData_HCP$Subject, SubjectIds$V2) #creating a new coloumn in UnrestrictedData_HCP with subject IDs matched from SubjectIDs. If no match is found NA will be appended
UnrestrictedFiltered <- as.data.frame(dplyr::filter(UnrestrictedData_HCP, !is.na(UnrestrictedData_HCP$subids))) #filtering data: keep only subjects, who do not have an NA in the newly created coloumn -> leaves only participants, who have scan data
RestrictedData_HCP$subids <- match(RestrictedData_HCP$Subject, SubjectIds$V2) #see UnrestrictedData_HCP
RestrictedFiltered <- as.data.frame(dplyr::filter(RestrictedData_HCP, !is.na(RestrictedData_HCP$subids))) #see UnrestrictedData_HCP
relevant_data <- data.frame(subID = UnrestrictedFiltered$Subject,
Sex = as.factor(UnrestrictedFiltered$Gender),
Age = as.factor(RestrictedFiltered$Age),
TwinStatus_selfreport = RestrictedFiltered$ZygositySR,
TwinStatus_GT = RestrictedFiltered$ZygosityGT,
ICV = UnrestrictedFiltered$FS_IntraCranial_Vol,
family_id = RestrictedFiltered$Family_ID)         #creating a new dataframe with variables, that are relevant for the linerar model
participants <- unique(SubjectIds$V2)     # Creating a list with participant IDs
freq_famID <- table(RestrictedFiltered$Family_ID)  # Creating a frequency table of family IDs
relevant_data$freq_famID <- freq_famID[RestrictedFiltered$Family_ID] # Appends the frequency of the family ID in a new column for every participant. If the frequency is >1 another sibling is included in the data set ->
relevant_data$freq_famID_labels <- ifelse(relevant_data$freq_famID > 1, 'siblings', 'unrelated') # if frequency is >1 label 'sibling' is appended to a new column. If the ID appears only once, no siblings are included in the sample and the label 'unrelated' will be appended
######################### Beginning of a for loop ############################################
for (x in participants) {
z <- subset(relevant_data, relevant_data$subID == x)  # creating a temporary subset with only one participant
if('unrelated' %in% z$freq_famID_labels) {  # if the label states 'unrelated', 'unrelated' will be appended to a new variable
z$Family_status <- 'unrelated'
} else if(!is.na(z$TwinStatus_GT)){  # OTHERWISE, if the Genotype variable is not NA the genotype label will be appended.
z$Family_status <- z$TwinStatus_GT
}
relevant_data[relevant_data$subID == x, 'Family_status'] <- z$Family_status    # the temporary subset will be written over the relevant data
}
View(z)
G1_loadings_PCA <- read.csv2('G1_loadings_Glasser.csv', sep = ',')
#importing the gradient 1 loadings from every participant
RestrictedData_HCP <- read.csv2('RESTRICTED_wanb_9_29_2020_2_14_36.csv', sep = ',')
# importing the restricted HCP data: includes exact age, family ID and twin status
UnrestrictedData_HCP <- read.csv2('unrestricted_wanb_9_14_2020_7_53_51.csv', sep = ',')
# importing the unrestricted HCP data: includes Sex
SubjectIds <- read.csv2('subjects_glasser.csv', sep = ',', header = FALSE)
# data frame of subject IDs, who have fMRI data
SubjectIds <- rm(SubjectIds[-1,])
SubjectIds <- rm(SubjectIds[-1,:])
rm(SubjectIds[-1,])
SubjectIds <- rm(SubjectIds[-1,])
View(SubjectIds)
SubjectIds <- SubjectIds[-1,]
UnrestrictedData_HCP$subids <- match(UnrestrictedData_HCP$Subject, SubjectIds$V2) #creating a new coloumn in UnrestrictedData_HCP with subject IDs matched from SubjectIDs. If no match is found NA will be appended
UnrestrictedFiltered <- as.data.frame(dplyr::filter(UnrestrictedData_HCP, !is.na(UnrestrictedData_HCP$subids))) #filtering data: keep only subjects, who do not have an NA in the newly created coloumn -> leaves only participants, who have scan data
RestrictedData_HCP$subids <- match(RestrictedData_HCP$Subject, SubjectIds$V2) #see UnrestrictedData_HCP
RestrictedFiltered <- as.data.frame(dplyr::filter(RestrictedData_HCP, !is.na(RestrictedData_HCP$subids))) #see UnrestrictedData_HCP
relevant_data <- data.frame(subID = UnrestrictedFiltered$Subject,
Sex = as.factor(UnrestrictedFiltered$Gender),
Age = as.factor(RestrictedFiltered$Age),
TwinStatus_selfreport = RestrictedFiltered$ZygositySR,
TwinStatus_GT = RestrictedFiltered$ZygosityGT,
ICV = UnrestrictedFiltered$FS_IntraCranial_Vol,
family_id = RestrictedFiltered$Family_ID)         #creating a new dataframe with variables, that are relevant for the linerar model
participants <- unique(SubjectIds$V2)     # Creating a list with participant IDs
freq_famID <- table(RestrictedFiltered$Family_ID)  # Creating a frequency table of family IDs
relevant_data$freq_famID <- freq_famID[RestrictedFiltered$Family_ID] # Appends the frequency of the family ID in a new column for every participant. If the frequency is >1 another sibling is included in the data set ->
relevant_data$freq_famID_labels <- ifelse(relevant_data$freq_famID > 1, 'siblings', 'unrelated') # if frequency is >1 label 'sibling' is appended to a new column. If the ID appears only once, no siblings are included in the sample and the label 'unrelated' will be appended
######################### Beginning of a for loop ############################################
for (x in participants) {
z <- subset(relevant_data, relevant_data$subID == x)  # creating a temporary subset with only one participant
if('unrelated' %in% z$freq_famID_labels) {  # if the label states 'unrelated', 'unrelated' will be appended to a new variable
z$Family_status <- 'unrelated'
} else if(!is.na(z$TwinStatus_GT)){  # OTHERWISE, if the Genotype variable is not NA the genotype label will be appended.
z$Family_status <- z$TwinStatus_GT
}
relevant_data[relevant_data$subID == x, 'Family_status'] <- z$Family_status    # the temporary subset will be written over the relevant data
}
############################ End of a for loop ###################################################
#Should the column still be empty the selfreport should be appended
relevant_data$Family_status <- ifelse(relevant_data$Family_status==" ", relevant_data$TwinStatus_selfreport, relevant_data$Family_status)
# If the family status states 'NotTwin' and the genotype is empty the label from freq_famID_labels (sibling/unrelated) will be appended, otherwise the label in the column will be kept
relevant_data$Family_status <- ifelse(relevant_data$TwinStatus_selfreport=="NotTwin" & relevant_data$TwinStatus_GT == " ", relevant_data$freq_famID_labels, relevant_data$Family_status)
# If the family status states 'NotMZ' and the genotype is empty 'DZ' will be appended, otherwise the label in the column will be kept
relevant_data$Family_status <- ifelse(relevant_data$TwinStatus_selfreport=="NotMZ" & relevant_data$TwinStatus_GT == " " & relevant_data$freq_famID_labels != 'unrelated' , 'DZ', relevant_data$Family_status)
# If the family status states 'MZ' and the genotype is empty and it is not coded as 'unrelated' 'MZ' will be appended, otherwise the label in the column will be kept
relevant_data$Family_status <- ifelse(relevant_data$TwinStatus_selfreport=="MZ" & relevant_data$TwinStatus_GT == " " & relevant_data$freq_famID_labels != 'unrelated' , 'MZ', relevant_data$Family_status)
# If the selfreport is empty a label based on the family ID frequency will be appended
relevant_data$Family_status <- ifelse(relevant_data$TwinStatus_selfreport == " ", relevant_data$freq_famID_labels, relevant_data$Family_status)
View(relevant_data)
relevant_data[, 11:410] <- G1_loadings_PCA
contrast_sex = data.frame()   # creating an empty data frame, where the results will be saved
parcels <- colnames(relevant_data[,11:410])     # creating a list of column names of the parcels for indexing
#################################### Beginning of a for loop ##############################################
# Linear model for each parcel with fixed (sex, age, intracranial volume) and random (Family status, familiy id and interaction of both)
for (parcel in parcels) {
model <- lmer(as.numeric(relevant_data[, parcel]) ~ factor(Sex) + as.numeric(Age) + as.numeric(ICV)+ (1|Family_status) + (1|family_id) + (1|family_id:Family_status), data = relevant_data, REML = FALSE)
contrast_sex[parcel, 't_value'] <- summary(model)$coefficients[2,4]  # saving the t-values of the fixed sex effect
contrast_sex[parcel, "p_val"] <- summary(model)$coefficients[2, 5]   # saving the p-values (uncorrected) of the fixed sex effect
}
##################################### End of a for loop ###################################################
contrast_sex[, 'q_val'] <- p.adjust(contrast_sex$p_val, method = "fdr") # Correcting the p values with FDR method and appending the corrected values to a new column
significant <- filter(contrast_sex, contrast_sex$q_val <0.05)  # 117 significant parcels
write.csv2(contrast_sex, '/data/p_02667/Liisbeth/anaconda3/envs/actualdata/PCA/Glasser/sex_contrasts_DM.csv', row.names = FALSE)
setwd('/data/p_02667/Liisbeth/anaconda3/envs/actualdata/PCA/Glasser')
library(dplyr)                   # For data manipulation
library(lme4)                    # For linear mixed effects model
library(lmerTest)                # For extracting p-values from the linear model
G1_loadings_PCA <- read.csv2('G1_loadings_Glasser.csv', sep = ',')
#importing the gradient 1 loadings from every participant
RestrictedData_HCP <- read.csv2('RESTRICTED_wanb_9_29_2020_2_14_36.csv', sep = ',')
# importing the restricted HCP data: includes exact age, family ID and twin status
UnrestrictedData_HCP <- read.csv2('unrestricted_wanb_9_14_2020_7_53_51.csv', sep = ',')
# importing the unrestricted HCP data: includes Sex
SubjectIds <- read.csv2('subjects_glasser.csv', sep = ',', header = FALSE)
SubjectIds <- SubjectIds[-1,]
# data frame of subject IDs, who have fMRI data
UnrestrictedData_HCP$subids <- match(UnrestrictedData_HCP$Subject, SubjectIds$V2) #creating a new coloumn in UnrestrictedData_HCP with subject IDs matched from SubjectIDs. If no match is found NA will be appended
UnrestrictedFiltered <- as.data.frame(dplyr::filter(UnrestrictedData_HCP, !is.na(UnrestrictedData_HCP$subids))) #filtering data: keep only subjects, who do not have an NA in the newly created coloumn -> leaves only participants, who have scan data
RestrictedData_HCP$subids <- match(RestrictedData_HCP$Subject, SubjectIds$V2) #see UnrestrictedData_HCP
RestrictedFiltered <- as.data.frame(dplyr::filter(RestrictedData_HCP, !is.na(RestrictedData_HCP$subids))) #see UnrestrictedData_HCP
relevant_data <- data.frame(subID = UnrestrictedFiltered$Subject,
Sex = as.factor(UnrestrictedFiltered$Gender),
Age = as.factor(RestrictedFiltered$Age),
TwinStatus_selfreport = RestrictedFiltered$ZygositySR,
TwinStatus_GT = RestrictedFiltered$ZygosityGT,
ICV = UnrestrictedFiltered$FS_IntraCranial_Vol,
family_id = RestrictedFiltered$Family_ID)         #creating a new dataframe with variables, that are relevant for the linerar model
participants <- unique(SubjectIds$V2)     # Creating a list with participant IDs
freq_famID <- table(RestrictedFiltered$Family_ID)  # Creating a frequency table of family IDs
relevant_data$freq_famID <- freq_famID[RestrictedFiltered$Family_ID] # Appends the frequency of the family ID in a new column for every participant. If the frequency is >1 another sibling is included in the data set ->
relevant_data$freq_famID_labels <- ifelse(relevant_data$freq_famID > 1, 'siblings', 'unrelated') # if frequency is >1 label 'sibling' is appended to a new column. If the ID appears only once, no siblings are included in the sample and the label 'unrelated' will be appended
######################### Beginning of a for loop ############################################
for (x in participants) {
z <- subset(relevant_data, relevant_data$subID == x)  # creating a temporary subset with only one participant
if('unrelated' %in% z$freq_famID_labels) {  # if the label states 'unrelated', 'unrelated' will be appended to a new variable
z$Family_status <- 'unrelated'
} else if(!is.na(z$TwinStatus_GT)){  # OTHERWISE, if the Genotype variable is not NA the genotype label will be appended.
z$Family_status <- z$TwinStatus_GT
}
relevant_data[relevant_data$subID == x, 'Family_status'] <- z$Family_status    # the temporary subset will be written over the relevant data
}
############################ End of a for loop ###################################################
#Should the column still be empty the selfreport should be appended
relevant_data$Family_status <- ifelse(relevant_data$Family_status==" ", relevant_data$TwinStatus_selfreport, relevant_data$Family_status)
# If the family status states 'NotTwin' and the genotype is empty the label from freq_famID_labels (sibling/unrelated) will be appended, otherwise the label in the column will be kept
relevant_data$Family_status <- ifelse(relevant_data$TwinStatus_selfreport=="NotTwin" & relevant_data$TwinStatus_GT == " ", relevant_data$freq_famID_labels, relevant_data$Family_status)
# If the family status states 'NotMZ' and the genotype is empty 'DZ' will be appended, otherwise the label in the column will be kept
relevant_data$Family_status <- ifelse(relevant_data$TwinStatus_selfreport=="NotMZ" & relevant_data$TwinStatus_GT == " " & relevant_data$freq_famID_labels != 'unrelated' , 'DZ', relevant_data$Family_status)
# If the family status states 'MZ' and the genotype is empty and it is not coded as 'unrelated' 'MZ' will be appended, otherwise the label in the column will be kept
relevant_data$Family_status <- ifelse(relevant_data$TwinStatus_selfreport=="MZ" & relevant_data$TwinStatus_GT == " " & relevant_data$freq_famID_labels != 'unrelated' , 'MZ', relevant_data$Family_status)
# If the selfreport is empty a label based on the family ID frequency will be appended
relevant_data$Family_status <- ifelse(relevant_data$TwinStatus_selfreport == " ", relevant_data$freq_famID_labels, relevant_data$Family_status)
relevant_data[, 11:370] <- G1_loadings_PCA
contrast_sex = data.frame()   # creating an empty data frame, where the results will be saved
parcels <- colnames(relevant_data[,11:410])     # creating a list of column names of the parcels for indexing
contrast_sex = data.frame()   # creating an empty data frame, where the results will be saved
parcels <- colnames(relevant_data[,11:370])     # creating a list of column names of the parcels for indexing
#################################### Beginning of a for loop ##############################################
# Linear model for each parcel with fixed (sex, age, intracranial volume) and random (Family status, familiy id and interaction of both)
for (parcel in parcels) {
model <- lmer(as.numeric(relevant_data[, parcel]) ~ factor(Sex) + as.numeric(Age) + as.numeric(ICV)+ (1|Family_status) + (1|family_id) + (1|family_id:Family_status), data = relevant_data, REML = FALSE)
contrast_sex[parcel, 't_value'] <- summary(model)$coefficients[2,4]  # saving the t-values of the fixed sex effect
contrast_sex[parcel, "p_val"] <- summary(model)$coefficients[2, 5]   # saving the p-values (uncorrected) of the fixed sex effect
}
##################################### End of a for loop ###################################################
contrast_sex[, 'q_val'] <- p.adjust(contrast_sex$p_val, method = "fdr") # Correcting the p values with FDR method and appending the corrected values to a new column
significant <- filter(contrast_sex, contrast_sex$q_val <0.05)  # 149 significant parcels
write.csv2(contrast_sex, '/data/p_02667/Liisbeth/anaconda3/envs/actualdata/PCA/Glasser/sex_contrasts_DM.csv', row.names = FALSE)
setwd('/data/p_02667/Liisbeth/anaconda3/envs/actualdata/Glasser')
library(dplyr)                   # For data manipulation
library(lme4)                    # For linear mixed effects model
library(lmerTest)                # For extracting p-values from the linear model
G1_loadings_PCA <- read.csv2('G1_loadings_Glasser.csv', sep = ',')
#importing the gradient 1 loadings from every participant
RestrictedData_HCP <- read.csv2('RESTRICTED_wanb_9_29_2020_2_14_36.csv', sep = ',')
# importing the restricted HCP data: includes exact age, family ID and twin status
UnrestrictedData_HCP <- read.csv2('unrestricted_wanb_9_14_2020_7_53_51.csv', sep = ',')
# importing the unrestricted HCP data: includes Sex
SubjectIds <- read.csv2('subjects_glasser.csv', sep = ',', header = FALSE)
SubjectIds <- SubjectIds[-1,]
# data frame of subject IDs, who have fMRI data
